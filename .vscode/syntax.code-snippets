{
	// Place your tea workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    "astnode": {
        "scope": "rust",
        "prefix": "astnode",
        "body": [

"#[derive(Debug, Clone, PartialEq, Eq, Hash)]",
"pub struct $1 {",
"    pub(crate) syntax: SyntaxNode,",
"}",
"",
"impl AstNode for $1 {",
"    #[inline]",
"    fn can_cast(kind: SyntaxKind) -> bool {",
"        kind == SyntaxKind::$2",
"    }",
"    #[inline]",
"    fn cast(syntax: SyntaxNode) -> Option<Self> {",
"        if Self::can_cast(syntax.kind()) {",
"            Some(Self { syntax })",
"        } else {",
"            None",
"        }",
"    }",
"    #[inline]",
"    fn syntax(&self) -> &SyntaxNode {",
"        &self.syntax",
"    }",
"}",

        ]
    },
    "astenum": {
        "scope": "rust",
        "prefix": "astenum",
        "body": [
"#[derive(Debug, Clone, PartialEq, Eq, Hash)]",
"pub enum $1 {",
"    $3($3),",
"}",
"",
"impl AstNode for $1 {",
"    #[inline]",
"    fn can_cast(kind: SyntaxKind) -> bool {",
"        matches!(kind, SyntaxKind::$2)",
"    }",
"    #[inline]",
"    fn cast(syntax: SyntaxNode) -> Option<Self> {",
"        let res = match syntax.kind() {",
"            SyntaxKind::DEFAULT_CONSTRAINT => {",
"                $1::$3($3 { syntax })",
"            }",
"            _ => return None,",
"        };",
"        Some(res)",
"    }",
"    #[inline]",
"    fn syntax(&self) -> &SyntaxNode {",
"        match self {",
"            $1::$3(it) => &it.syntax,",
"        }",
"    }",
"}",

        ]
    }
}
